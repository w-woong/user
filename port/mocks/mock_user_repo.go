// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/w-woong/user/entity"
	port "github.com/w-woong/user/port"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(ctx context.Context, tx port.TxController, user entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, tx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(ctx, tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), ctx, tx, user)
}

// DeleteUserByID mocks base method.
func (m *MockUserRepo) DeleteUserByID(ctx context.Context, tx port.TxController, ID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", ctx, tx, ID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockUserRepoMockRecorder) DeleteUserByID(ctx, tx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockUserRepo)(nil).DeleteUserByID), ctx, tx, ID)
}

// ReadUserByID mocks base method.
func (m *MockUserRepo) ReadUserByID(ctx context.Context, tx port.TxController, ID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByID", ctx, tx, ID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByID indicates an expected call of ReadUserByID.
func (mr *MockUserRepoMockRecorder) ReadUserByID(ctx, tx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByID", reflect.TypeOf((*MockUserRepo)(nil).ReadUserByID), ctx, tx, ID)
}

// ReadUserByIDNoTx mocks base method.
func (m *MockUserRepo) ReadUserByIDNoTx(ctx context.Context, ID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByIDNoTx", ctx, ID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByIDNoTx indicates an expected call of ReadUserByIDNoTx.
func (mr *MockUserRepoMockRecorder) ReadUserByIDNoTx(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByIDNoTx", reflect.TypeOf((*MockUserRepo)(nil).ReadUserByIDNoTx), ctx, ID)
}

// ReadUserByLoginID mocks base method.
func (m *MockUserRepo) ReadUserByLoginID(ctx context.Context, tx port.TxController, loginID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByLoginID", ctx, tx, loginID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByLoginID indicates an expected call of ReadUserByLoginID.
func (mr *MockUserRepoMockRecorder) ReadUserByLoginID(ctx, tx, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByLoginID", reflect.TypeOf((*MockUserRepo)(nil).ReadUserByLoginID), ctx, tx, loginID)
}

// ReadUserByLoginIDNoTx mocks base method.
func (m *MockUserRepo) ReadUserByLoginIDNoTx(ctx context.Context, loginID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByLoginIDNoTx", ctx, loginID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByLoginIDNoTx indicates an expected call of ReadUserByLoginIDNoTx.
func (mr *MockUserRepoMockRecorder) ReadUserByLoginIDNoTx(ctx, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByLoginIDNoTx", reflect.TypeOf((*MockUserRepo)(nil).ReadUserByLoginIDNoTx), ctx, loginID)
}

// MockPasswordRepo is a mock of PasswordRepo interface.
type MockPasswordRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordRepoMockRecorder
}

// MockPasswordRepoMockRecorder is the mock recorder for MockPasswordRepo.
type MockPasswordRepoMockRecorder struct {
	mock *MockPasswordRepo
}

// NewMockPasswordRepo creates a new mock instance.
func NewMockPasswordRepo(ctrl *gomock.Controller) *MockPasswordRepo {
	mock := &MockPasswordRepo{ctrl: ctrl}
	mock.recorder = &MockPasswordRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordRepo) EXPECT() *MockPasswordRepoMockRecorder {
	return m.recorder
}

// ReadByUserID mocks base method.
func (m *MockPasswordRepo) ReadByUserID(ctx context.Context, tx port.TxController, userID string) (entity.Password, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByUserID", ctx, tx, userID)
	ret0, _ := ret[0].(entity.Password)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByUserID indicates an expected call of ReadByUserID.
func (mr *MockPasswordRepoMockRecorder) ReadByUserID(ctx, tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByUserID", reflect.TypeOf((*MockPasswordRepo)(nil).ReadByUserID), ctx, tx, userID)
}

// ReadByUserIDNoTx mocks base method.
func (m *MockPasswordRepo) ReadByUserIDNoTx(ctx context.Context, userID string) (entity.Password, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByUserIDNoTx", ctx, userID)
	ret0, _ := ret[0].(entity.Password)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByUserIDNoTx indicates an expected call of ReadByUserIDNoTx.
func (mr *MockPasswordRepoMockRecorder) ReadByUserIDNoTx(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByUserIDNoTx", reflect.TypeOf((*MockPasswordRepo)(nil).ReadByUserIDNoTx), ctx, userID)
}

// UpdateByUserID mocks base method.
func (m *MockPasswordRepo) UpdateByUserID(ctx context.Context, tx port.TxController, value, userID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByUserID", ctx, tx, value, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByUserID indicates an expected call of UpdateByUserID.
func (mr *MockPasswordRepoMockRecorder) UpdateByUserID(ctx, tx, value, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByUserID", reflect.TypeOf((*MockPasswordRepo)(nil).UpdateByUserID), ctx, tx, value, userID)
}
