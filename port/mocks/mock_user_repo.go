// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/w-woong/common"
	entity "github.com/w-woong/user/entity"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(ctx context.Context, tx common.TxController, user entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, tx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(ctx, tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), ctx, tx, user)
}

// DeleteUser mocks base method.
func (m *MockUserRepo) DeleteUser(ctx context.Context, tx common.TxController, id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, tx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepoMockRecorder) DeleteUser(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepo)(nil).DeleteUser), ctx, tx, id)
}

// ReadByLoginID mocks base method.
func (m *MockUserRepo) ReadByLoginID(ctx context.Context, tx common.TxController, loginID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByLoginID", ctx, tx, loginID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByLoginID indicates an expected call of ReadByLoginID.
func (mr *MockUserRepoMockRecorder) ReadByLoginID(ctx, tx, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByLoginID", reflect.TypeOf((*MockUserRepo)(nil).ReadByLoginID), ctx, tx, loginID)
}

// ReadByLoginIDNoTx mocks base method.
func (m *MockUserRepo) ReadByLoginIDNoTx(ctx context.Context, loginID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByLoginIDNoTx", ctx, loginID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByLoginIDNoTx indicates an expected call of ReadByLoginIDNoTx.
func (mr *MockUserRepoMockRecorder) ReadByLoginIDNoTx(ctx, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByLoginIDNoTx", reflect.TypeOf((*MockUserRepo)(nil).ReadByLoginIDNoTx), ctx, loginID)
}

// ReadUser mocks base method.
func (m *MockUserRepo) ReadUser(ctx context.Context, tx common.TxController, id string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUser", ctx, tx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUser indicates an expected call of ReadUser.
func (mr *MockUserRepoMockRecorder) ReadUser(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUser", reflect.TypeOf((*MockUserRepo)(nil).ReadUser), ctx, tx, id)
}

// ReadUserNoTx mocks base method.
func (m *MockUserRepo) ReadUserNoTx(ctx context.Context, id string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserNoTx", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserNoTx indicates an expected call of ReadUserNoTx.
func (mr *MockUserRepoMockRecorder) ReadUserNoTx(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserNoTx", reflect.TypeOf((*MockUserRepo)(nil).ReadUserNoTx), ctx, id)
}

// MockPasswordRepo is a mock of PasswordRepo interface.
type MockPasswordRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordRepoMockRecorder
}

// MockPasswordRepoMockRecorder is the mock recorder for MockPasswordRepo.
type MockPasswordRepoMockRecorder struct {
	mock *MockPasswordRepo
}

// NewMockPasswordRepo creates a new mock instance.
func NewMockPasswordRepo(ctrl *gomock.Controller) *MockPasswordRepo {
	mock := &MockPasswordRepo{ctrl: ctrl}
	mock.recorder = &MockPasswordRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordRepo) EXPECT() *MockPasswordRepoMockRecorder {
	return m.recorder
}

// DeleteByUserID mocks base method.
func (m *MockPasswordRepo) DeleteByUserID(ctx context.Context, tx common.TxController, userID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserID", ctx, tx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByUserID indicates an expected call of DeleteByUserID.
func (mr *MockPasswordRepoMockRecorder) DeleteByUserID(ctx, tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserID", reflect.TypeOf((*MockPasswordRepo)(nil).DeleteByUserID), ctx, tx, userID)
}

// ReadByUserID mocks base method.
func (m *MockPasswordRepo) ReadByUserID(ctx context.Context, tx common.TxController, userID string) (entity.CredentialPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByUserID", ctx, tx, userID)
	ret0, _ := ret[0].(entity.CredentialPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByUserID indicates an expected call of ReadByUserID.
func (mr *MockPasswordRepoMockRecorder) ReadByUserID(ctx, tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByUserID", reflect.TypeOf((*MockPasswordRepo)(nil).ReadByUserID), ctx, tx, userID)
}

// ReadByUserIDNoTx mocks base method.
func (m *MockPasswordRepo) ReadByUserIDNoTx(ctx context.Context, userID string) (entity.CredentialPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByUserIDNoTx", ctx, userID)
	ret0, _ := ret[0].(entity.CredentialPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByUserIDNoTx indicates an expected call of ReadByUserIDNoTx.
func (mr *MockPasswordRepoMockRecorder) ReadByUserIDNoTx(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByUserIDNoTx", reflect.TypeOf((*MockPasswordRepo)(nil).ReadByUserIDNoTx), ctx, userID)
}

// UpdateByUserID mocks base method.
func (m *MockPasswordRepo) UpdateByUserID(ctx context.Context, tx common.TxController, value, userID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByUserID", ctx, tx, value, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByUserID indicates an expected call of UpdateByUserID.
func (mr *MockPasswordRepoMockRecorder) UpdateByUserID(ctx, tx, value, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByUserID", reflect.TypeOf((*MockPasswordRepo)(nil).UpdateByUserID), ctx, tx, value, userID)
}

// MockPersonalRepo is a mock of PersonalRepo interface.
type MockPersonalRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPersonalRepoMockRecorder
}

// MockPersonalRepoMockRecorder is the mock recorder for MockPersonalRepo.
type MockPersonalRepoMockRecorder struct {
	mock *MockPersonalRepo
}

// NewMockPersonalRepo creates a new mock instance.
func NewMockPersonalRepo(ctrl *gomock.Controller) *MockPersonalRepo {
	mock := &MockPersonalRepo{ctrl: ctrl}
	mock.recorder = &MockPersonalRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonalRepo) EXPECT() *MockPersonalRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPersonalRepo) Create(ctx context.Context, tx common.TxController, o entity.Personal) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, o)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPersonalRepoMockRecorder) Create(ctx, tx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPersonalRepo)(nil).Create), ctx, tx, o)
}

// Delete mocks base method.
func (m *MockPersonalRepo) Delete(ctx context.Context, tx common.TxController, id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, tx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPersonalRepoMockRecorder) Delete(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPersonalRepo)(nil).Delete), ctx, tx, id)
}

// Read mocks base method.
func (m *MockPersonalRepo) Read(ctx context.Context, tx common.TxController, id string) (entity.Personal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, tx, id)
	ret0, _ := ret[0].(entity.Personal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockPersonalRepoMockRecorder) Read(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPersonalRepo)(nil).Read), ctx, tx, id)
}

// ReadNoTx mocks base method.
func (m *MockPersonalRepo) ReadNoTx(ctx context.Context, id string) (entity.Personal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNoTx", ctx, id)
	ret0, _ := ret[0].(entity.Personal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNoTx indicates an expected call of ReadNoTx.
func (mr *MockPersonalRepoMockRecorder) ReadNoTx(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNoTx", reflect.TypeOf((*MockPersonalRepo)(nil).ReadNoTx), ctx, id)
}

// Update mocks base method.
func (m *MockPersonalRepo) Update(ctx context.Context, tx common.TxController, o entity.Personal) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, o)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPersonalRepoMockRecorder) Update(ctx, tx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPersonalRepo)(nil).Update), ctx, tx, o)
}

// MockEmailRepo is a mock of EmailRepo interface.
type MockEmailRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEmailRepoMockRecorder
}

// MockEmailRepoMockRecorder is the mock recorder for MockEmailRepo.
type MockEmailRepoMockRecorder struct {
	mock *MockEmailRepo
}

// NewMockEmailRepo creates a new mock instance.
func NewMockEmailRepo(ctrl *gomock.Controller) *MockEmailRepo {
	mock := &MockEmailRepo{ctrl: ctrl}
	mock.recorder = &MockEmailRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailRepo) EXPECT() *MockEmailRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEmailRepo) Create(ctx context.Context, tx common.TxController, o entity.Email) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, o)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEmailRepoMockRecorder) Create(ctx, tx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEmailRepo)(nil).Create), ctx, tx, o)
}

// Delete mocks base method.
func (m *MockEmailRepo) Delete(ctx context.Context, tx common.TxController, id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, tx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockEmailRepoMockRecorder) Delete(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmailRepo)(nil).Delete), ctx, tx, id)
}

// Read mocks base method.
func (m *MockEmailRepo) Read(ctx context.Context, tx common.TxController, id string) (entity.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, tx, id)
	ret0, _ := ret[0].(entity.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockEmailRepoMockRecorder) Read(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockEmailRepo)(nil).Read), ctx, tx, id)
}

// ReadNoTx mocks base method.
func (m *MockEmailRepo) ReadNoTx(ctx context.Context, id string) (entity.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNoTx", ctx, id)
	ret0, _ := ret[0].(entity.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNoTx indicates an expected call of ReadNoTx.
func (mr *MockEmailRepoMockRecorder) ReadNoTx(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNoTx", reflect.TypeOf((*MockEmailRepo)(nil).ReadNoTx), ctx, id)
}

// Update mocks base method.
func (m *MockEmailRepo) Update(ctx context.Context, tx common.TxController, o entity.Email) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, o)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEmailRepoMockRecorder) Update(ctx, tx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmailRepo)(nil).Update), ctx, tx, o)
}
